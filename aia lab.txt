tic toc toe game program:
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)
def check_win(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if board[0][0] == board[1][1] == board[2][2] == player:
        return True
    if board[0][2] == board[1][1] == board[2][0] == player:
        return True
    return False
def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    while True:
        print_board(board)
        row = int(input("Enter the row (0-2): "))
        col = int(input("Enter the column (0-2): "))
        board[row][col] = current_player
        if check_win(board, current_player):
            print("Player", current_player, "wins!")
            break
        if all(cell != " " for row in board for cell in row):
            print("It's a tie!")
            break
        current_player = "O" if current_player == "X" else "X"
# Start the game
play_game()
--------------------------------------------------------------------
water jug problem :
j1=int(input("enter the capacity of jug 1:"))
j2=int(input("enter the capacity of jug 2:"))
g=int(input("amount of water to be measured"))
def apply_rule(ch,x,y):
    if ch==1:
        if x<j1:
            return j1,y
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==2:
        if y<j2:
            return x,j2
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==3:
        if x>0 and x+y<=j2:
            return 0,x+y
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==4:
        if y>0 and x+y<=j2:
            return x+y,0
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==5:
        if x>0 and x+y>=j2:
            return x-(j2-y),j2
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==6:
        if y>0 and x+y>j1:
            return j1,y-(j1-x)
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==7:
        if x>0:
            return 0,y
        else:
            print("rule cannot be applied")
            return x,y
    elif ch==8:
        if y>0:
            return x,0
        else:
            print("rule cannot be applied")
            return x,y
    else:
         print("invalid choice")
x=y=0
while(True):
    if(x==g)or(y==g):
        print("goal achived")
        break
    else:
         print("rule1:fill jug1")
         print("rule2:fill jug2")
         print("rule3:transfer all water from jug1 to jug2")
         print("rule4:transfer all water from jug2 to jug1")
         print("rule5:transfer some water from jug1 to jug2 until jug2 is full")
         print("rule6:transfer some water from jug2 to jug1 until jug1 is full")
         print("rule7:empty jug1")
         print("rule8:empty jug2")
         ch=int(input("enter the rule to apply:"))
         x,y=apply_rule(ch,x,y)
         print("current state:",end=" ")
         print(x,y)
--------------------------------------------------------------------------------------------
8puzzle
from collections import deque
def print_board(state):
    for row in state:
        print(row)
    print()
def find_empty_space(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def get_possible_moves(state):
    row, col = find_empty_space(state)
    possible_moves = []
    # Check if the empty space can move up
    if row > 0:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row-1][col] = new_state[row-1][col], new_state[row][col]
        possible_moves.append(new_state)
    # Check if the empty space can move down
    if row < 2:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row+1][col] = new_state[row+1][col], new_state[row][col]
        possible_moves.append(new_state)
    # Check if the empty space can move left
    if col > 0:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row][col-1] = new_state[row][col-1], new_state[row][col]
        possible_moves.append(new_state)
    # Check if the empty space can move right
    if col < 2:
        new_state = [row[:] for row in state]
        new_state[row][col], new_state[row][col+1] = new_state[row][col+1], new_state[row][col]
        possible_moves.append(new_state)
    return possible_moves
def solve_puzzle(initial_state, goal_state):
    visited = set()
    queue = deque([(initial_state, [])])
    while queue:
        state, path = queue.popleft()
        if state == goal_state:
            return path
        visited.add(tuple(map(tuple, state)))
        for new_state in get_possible_moves(state):
            if tuple(map(tuple, new_state)) not in visited:
                queue.append((new_state, path + [new_state]))
    return None
# Example usage
initial_state = [[1, 2, 5], [3, 4, 0], [6, 7, 8]]
goal_state = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
solution = solve_puzzle(initial_state, goal_state)
if solution:
    print("Solution found!")
    for step in solution:
        print_board(step)
else:
    print("No solution exists.")
---------------------------------------------------------------------------------------------------------
salesman problem:
answer=[]
def tsp(graph,v,curpos,n,count,cost):
    if(count==n and graph[curpos][0]):
        answer.append(cost+graph[curpos][0])
        return
    for i in range(n):
        if(v[i]==False and graph[curpos][i]):  
          v[i]=False
          tsp(graph,v,i,n,count+1,cost+graph[curpos][i])
          v[i]=False
n=4
graph=[[0,10,15,20],
       [10,0,35,25],
       [15,35,0,30],
       [20,25,30,0]]
v=[False for i in range(n)]
v[0]=True
tsp(graph,v,0,n,1,0)
print(min(answer))
---------------------------------------------------------------------------------------
n-queen problm:
def is_safe(board, row, col, N):
    for i in range(col):
        if board[row][i] == 1:
            return False
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 1:
            return False
        i -= 1
        j -= 1
    i, j = row, col
    while i < N and j >= 0:
        if board[i][j] == 1:
            return False
        i += 1
        j -= 1
    return True
def solve_n_queens_util(board, col, N):
    if col >= N:
        return True
    for i in range(N):
        if is_safe(board, i, col, N):
            board[i][col] = 1
            if solve_n_queens_util(board, col + 1, N):
                return True
            board[i][col] = 0
    return False
def solve_n_queens(N):
    board = [[0] * N for _ in range(N)]
    if not solve_n_queens_util(board, 0, N):
        print("No solution exists.")
    else:
        # Print the solution
        print("Solution:")
        for row in board:
            print(row)
n = 4  #
solve_n_queens(n)
------------------------------------------------------------------------------------------

      